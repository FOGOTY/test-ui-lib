-- UI Library Module
local UILibrary = {}

-- Variables to track element positioning
local elementCount = 0
local elementSpacing = 15 -- Space between elements
local defaultButtonSize = UDim2.new(0, 200, 0, 50)
local defaultInputSize = UDim2.new(0, 200, 0, 30)
local defaultSliderSize = UDim2.new(0, 200, 0, 30)
local defaultToggleSize = UDim2.new(0, 200, 0, 50)
local defaultLabelSize = UDim2.new(0, 200, 0, 30)
local defaultKeybindSize = UDim2.new(0, 200, 0, 50)

-- Function to make a frame draggable
local function MakeFrameDraggable(frame, dragHandle)
    local dragging = false
    local dragInput, dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end

    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragHandle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    dragHandle.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            update(input)
        end
    end)
end

-- Function to create the main UI frame and close button
function UILibrary.CreateFrame(parent)
    -- Create a scrollable frame (ScrollingFrame)
    local frame = Instance.new("ScrollingFrame")
    frame.Size = UDim2.new(0, 300, 0, 400)
    frame.Position = UDim2.new(0.5, -150, 0.5, -200) -- Center frame
    frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(255, 255, 255)
    frame.ScrollBarThickness = 10
    frame.CanvasSize = UDim2.new(0, 0, 0, 0) -- This will adjust as you add elements
    frame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    frame.AutomaticCanvasSize = Enum.AutomaticSize.Y -- Automatic vertical scrolling
    frame.Parent = parent

    -- Create a draggable title bar
    local titleBar = Instance.new("TextLabel")
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    titleBar.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleBar.Font = Enum.Font.SourceSansBold
    titleBar.Text = "UI Frame"
    titleBar.TextSize = 18
    titleBar.TextXAlignment = Enum.TextXAlignment.Left
    titleBar.Parent = frame

    -- Make the frame draggable by dragging the title bar
    MakeFrameDraggable(frame, titleBar)

    -- Create close button
    local closeButton = Instance.new("TextButton")
    closeButton.Text = "Close"
    closeButton.Size = UDim2.new(0, 80, 0, 30)
    closeButton.Position = UDim2.new(1, -90, 0, 0) -- Top right corner inside frame
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.TextSize = 18
    closeButton.Parent = frame

    -- Toggle frame visibility when close button is clicked
    closeButton.MouseButton1Click:Connect(function()
        frame.Visible = not frame.Visible
    end)

    -- Return the frame so that buttons can be added later
    return frame
end

-- Function to create a new button inside the frame
function UILibrary.CreateButton(frame, buttonText, callback)
    -- Calculate position based on the number of elements and spacing
    local buttonPosition = UDim2.new(0.5, 0, 0, 30 + elementCount * (defaultButtonSize.Y.Offset + elementSpacing))

    -- Create the button
    local button = Instance.new("TextButton")
    
    -- Set default properties
    button.Text = buttonText or "Button"
    button.Position = buttonPosition
    button.Size = defaultButtonSize
    button.AnchorPoint = Vector2.new(0.5, 0) -- Anchor to top center
    button.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.SourceSansBold
    button.TextSize = 24

    -- Parent the button to the provided frame
    button.Parent = frame
    
    -- Set up a click event for the button
    if callback then
        button.MouseButton1Click:Connect(callback)
    end

    -- Increment element count to adjust position for the next element
    elementCount = elementCount + 1

    -- Adjust the CanvasSize of the frame to accommodate new elements
    frame.CanvasSize = UDim2.new(0, 0, 0, (elementCount * (defaultButtonSize.Y.Offset + elementSpacing)) + 60)

    -- Return the button in case further customization is needed
    return button
end

-- Function to create a new input field with an action button inside the frame
function UILibrary.CreateInput(frame, placeholderText, buttonText, callback)
    -- Calculate position based on the number of elements and spacing
    local inputPosition = UDim2.new(0.5, 0, 0, 30 + elementCount * (defaultInputSize.Y.Offset + elementSpacing))

    -- Create a TextBox for input
    local inputBox = Instance.new("TextBox")
    inputBox.PlaceholderText = placeholderText or "Enter text..."
    inputBox.Position = inputPosition
    inputBox.Size = defaultInputSize
    inputBox.AnchorPoint = Vector2.new(0.5, 0)
    inputBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    inputBox.TextColor3 = Color3.fromRGB(0, 0, 0)
    inputBox.Font = Enum.Font.SourceSans
    inputBox.TextSize = 18
    inputBox.Parent = frame

    -- Create the submit button
    local submitButton = Instance.new("TextButton")
    submitButton.Text = buttonText or "Submit"
    submitButton.Position = inputPosition + UDim2.new(0, 0, 0, defaultInputSize.Y.Offset + elementSpacing)
    submitButton.Size = defaultInputSize
    submitButton.AnchorPoint = Vector2.new(0.5, 0)
    submitButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    submitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    submitButton.Font = Enum.Font.SourceSansBold
    submitButton.TextSize = 18
    submitButton.Parent = frame

    -- Connect the button click to the callback, passing the TextBox value
    submitButton.MouseButton1Click:Connect(function()
        if callback then
            callback(inputBox.Text)
        end
    end)

    -- Increment element count for positioning the next UI element
    elementCount = elementCount + 2

    -- Adjust the CanvasSize of the frame to accommodate new elements
    frame.CanvasSize = UDim2.new(0, 0, 0, (elementCount * (defaultInputSize.Y.Offset + elementSpacing)) + 60)

    -- Return the inputBox and submitButton for further customization if needed
    return inputBox, submitButton
end

-- Function to create a slider inside the frame
function UILibrary.CreateSlider(frame, sliderText, minValue, maxValue, callback)
    -- Calculate position based on the number of elements and spacing
    local sliderPosition = UDim2.new(0.5, 0, 0, 30 + elementCount * (defaultSliderSize.Y.Offset + elementSpacing))

    -- Create a label for the slider
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Text = sliderText or "Slider"
    sliderLabel.Position = sliderPosition
    sliderLabel.Size = defaultSliderSize
    sliderLabel.AnchorPoint = Vector2.new(0.5, 0)
    sliderLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    sliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    sliderLabel.Font = Enum.Font.SourceSans
    sliderLabel.TextSize = 18
    sliderLabel.Parent = frame

    -- Create the actual slider
    local slider = Instance.new("TextButton") -- Simulating a slider
    slider.Position = sliderPosition + UDim2.new(0, 0, 0, defaultSliderSize.Y.Offset + elementSpacing)
    slider.Size = defaultSliderSize
    slider.AnchorPoint = Vector2.new(0.5, 0)
    slider.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    slider.Text = "Adjust Me"
    slider.TextColor3 = Color3.fromRGB(255, 255, 255)
    slider.Font = Enum.Font.SourceSansBold
    slider.TextSize = 18
    slider.Parent = frame

    -- Connect the slider adjustment to the callback
    slider.MouseButton1Click:Connect(function()
        local currentValue = math.random(minValue or 0, maxValue or 100) -- Simulated value change
        if callback then
            callback(currentValue)
        end
    end)

    -- Increment element count for positioning the next UI element
    elementCount = elementCount + 2

    -- Adjust the CanvasSize of the frame to accommodate new elements
    frame.CanvasSize = UDim2.new(0, 0, 0, (elementCount * (defaultSliderSize.Y.Offset + elementSpacing)) + 60)

    -- Return the slider for further customization if needed
    return slider
end

-- New Function to create a toggle button inside the frame
function UILibrary.CreateToggle(frame, toggleText, callback)
    -- Calculate position based on the number of elements and spacing
    local togglePosition = UDim2.new(0.5, 0, 0, 30 + elementCount * (defaultToggleSize.Y.Offset + elementSpacing))

    -- Create the toggle button
    local toggleButton = Instance.new("TextButton")
    toggleButton.Text = toggleText or "Toggle Off"
    toggleButton.Position = togglePosition
    toggleButton.Size = defaultToggleSize
    toggleButton.AnchorPoint = Vector2.new(0.5, 0)
    toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Default to "off"
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Font = Enum.Font.SourceSansBold
    toggleButton.TextSize = 24

    -- Track the toggle state (off by default)
    local isOn = false

    -- Set up the toggle functionality
    toggleButton.MouseButton1Click:Connect(function()
        isOn = not isOn -- Toggle the state
        if isOn then
            toggleButton.Text = toggleText or "Toggle On"
            toggleButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Change to "on"
        else
            toggleButton.Text = toggleText or "Toggle Off"
            toggleButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Change to "off"
        end

        -- Trigger the callback with the current state
        if callback then
            callback(isOn)
        end
    end)

    -- Parent the button to the provided frame
    toggleButton.Parent = frame

    -- Increment element count for positioning the next UI element
    elementCount = elementCount + 1

    -- Adjust the CanvasSize of the frame to accommodate new elements
    frame.CanvasSize = UDim2.new(0, 0, 0, (elementCount * (defaultToggleSize.Y.Offset + elementSpacing)) + 60)

    -- Return the toggleButton in case further customization is needed
    return toggleButton
end
function UILibrary.CreateLabel(frame, labelText)
    -- Calculate position based on the number of elements and spacing
    local labelPosition = UDim2.new(0.5, 0, 0, 30 + elementCount * (defaultLabelSize.Y.Offset + elementSpacing))

    -- Create the label
    local label = Instance.new("TextLabel")
    label.Text = labelText or "Label"
    label.Position = labelPosition
    label.Size = defaultLabelSize
    label.AnchorPoint = Vector2.new(0.5, 0) -- Center the label
    label.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Set background color
    label.TextColor3 = Color3.fromRGB(255, 255, 255) -- Set text color
    label.Font = Enum.Font.SourceSans -- Font style
    label.TextSize = 24 -- Font size
    label.Parent = frame

    -- Increment element count for positioning the next UI element
    elementCount = elementCount + 1

    -- Adjust the CanvasSize of the frame to accommodate new elements
    frame.CanvasSize = UDim2.new(0, 0, 0, (elementCount * (defaultLabelSize.Y.Offset + elementSpacing)) + 60)

    -- Return the label for further customization if needed
    return label
end

function UILibrary.CreateKeybind(frame, bindText, callback)
    -- Calculate position based on the number of elements and spacing
    local keybindPosition = UDim2.new(0.5, 0, 0, 30 + elementCount * (defaultKeybindSize.Y.Offset + elementSpacing))

    -- Create a button for selecting the keybind
    local keybindButton = Instance.new("TextButton")
    keybindButton.Text = bindText or "Press a Key"
    keybindButton.Position = keybindPosition
    keybindButton.Size = defaultKeybindSize
    keybindButton.AnchorPoint = Vector2.new(0.5, 0)
    keybindButton.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
    keybindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    keybindButton.Font = Enum.Font.SourceSansBold
    keybindButton.TextSize = 24
    keybindButton.Parent = frame

    -- Variable to store the selected key
    local selectedKey = nil
    local waitingForKey = false

    -- Function to detect key press for binding
    local function detectKeyPress(input)
        if waitingForKey then
            if input.UserInputType == Enum.UserInputType.Keyboard then
                selectedKey = input.KeyCode
                keybindButton.Text = "Bound to: " .. tostring(selectedKey.Name)
                waitingForKey = false
            end
        end
    end

    -- Button click to start listening for a key press
    keybindButton.MouseButton1Click:Connect(function()
        keybindButton.Text = "Press any key..."
        waitingForKey = true
    end)

    -- Bind to input events to detect the keypress
    game:GetService("UserInputService").InputBegan:Connect(function(input)
        detectKeyPress(input)
    end)

    -- Listen for key presses to trigger the callback
    game:GetService("UserInputService").InputBegan:Connect(function(input)
        if input.KeyCode == selectedKey and callback then
            callback()
        end
    end)

    -- Increment element count for positioning the next UI element
    elementCount = elementCount + 1

    -- Adjust the CanvasSize of the frame to accommodate new elements
    frame.CanvasSize = UDim2.new(0, 0, 0, (elementCount * (defaultKeybindSize.Y.Offset + elementSpacing)) + 60)

    -- Return the keybindButton for further customization if needed
    return keybindButton
end
-- Reset element count (useful if you want to reset the element positions later)
function UILibrary.ResetElementCount()
    elementCount = 0
end

return UILibrary
